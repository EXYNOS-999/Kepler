The files provided in this directory allow us to work through an example
of using the codes to analyze Kepler data.

Commands are show on lines that start with a " : " 
Here's an example
 : ../bin/transitfit5 lc.dat null n0.dat > /dev/null 
You would type everything after " : " 

Okay, let's get started.  Let's begin with the Kepler-11 system.  The 
file n0_g.dat contains a transit-model for this system.  The first 18
lines of this file look like,

RHO  1.2236880239E+00  0.0000000000E+00 -1.0000000000E+00  0.0000000000E+00
NL1  4.2010000000E-01  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
NL2  2.5400000000E-01  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
NL3  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
NL4  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
DIL  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
VOF  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
ZPT  3.5852870878E-06  0.0000000000E+00 -1.0000000000E+00  0.0000000000E+00
EP1  7.1176453358E+01  0.0000000000E+00 -1.0000000000E+00  0.0000000000E+00
PE1  1.3024927141E+01  0.0000000000E+00 -1.0000000000E+00  0.0000000000E+00
BB1  1.3931409177E-01  0.0000000000E+00 -1.0000000000E+00  0.0000000000E+00
RD1  2.5819765742E-02  0.0000000000E+00 -1.0000000000E+00  0.0000000000E+00
EC1  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
ES1  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
KR1  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
TE1  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
EL1  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00
AL1  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00  0.0000000000E+00

The first column gives the name of the model parameter, the second gives
the value.  For this exercise we will ignore columns 3 and 5.  The forth
column indicates whether a parameter is fitted.  If column 4 is set to
zero, then the parameter is held fixed, otherwise it is fitted.  The
model parameters are,

RHO - mean-stellar density (g/cm^3)
NL1-4 - limb-darkening parameters.  If NL3,NL4=0 then a quadratric law is
 assumed, otherwise a non-linear law is used.
DIL - dilution.  Amount of additional flux in the aperture not from the
 primary star.  DIL=0 means all light is from the primary star, DIL=0.9 
 means that the primary star only contributes 10% of the measured fluxed.
VOF - velocity offset (m/s) - the zero point for radial velocity 
 measuremments
ZPT - photometric zero point - should be close to zero as we use a 
 median subtracted lightcurve
EP1 - epoch (BJD-2454900) - time of center of transit time.  Note that
 the epoch of the model parameter is different than the raw lightcurve.
 The number '1' from EP1 indicates which planet is being modeled.  The
 model handles multiple planets, so a second planet would have the 
 parameter name EP2 and the third would be EP3.  The code can handle up
 to 9 planets.
PE1 - orbital period (days) - orbital period of the planet.
BB1 - impact parameter - impact parameter of the planet at mid-transit
RD1 - Rp/R* - ratio of the planet-radius to the stellar radius
EC1 - e cos(w) - eccentricity vector
ES1 - e sin(w) - eccentricity vector 
KR1 - K (m/s) - amplitude of radial velocity
TE1 - eclipse depth (ppm)
EL1 - ellipsoidal variations (ppm) - amplitude of tidal-induced 
 ellipsodial varations
AL1 - phase curve amplitude (ppm) - amplitude of phase-curve from phase
 changes of planet (Lambertian) 

Now we can begin to explore the models and data. First we need to create 
some data to use.  The directory "FITS" contains Kepler FITS files 
downloaded from MAST for the Kepler-11 system.  The codes typically work 
with simple ASCII files.

*A1. Convert FITS tables retrieve from MAST to a simple ASCII file

 : ../bin/kfitsread `find FITS | grep fits` > klc06541920.dat

 We use the command kfitsread.  By making use the UNIX find and grep 
 commands we can feed all the FITS files to the program.  The extracted
 lightcurve is outputed to STDOUT, so we redirect it into a file.  The
 new file, klc06541920.dat, contains three columns,
 
 1. Time-stamp : BJD-2450000.5
 2. median subtracted PDC flux
 3. photometric error as retrieved from the FITS binary table. 

You can now use any plotting software (e.g., gnuplot) to plot the 
time-series.

*A2. Detrend the lightcurve.

 : ../bin/detrend5 0 klc06541920.dat 2 n0_g.dat > klc06541920.d.dat
 
The command detrend5 is used to detrend the dataset.  The first argument 
selects the type of detrender to use. "0" selects a polynomial filter 
and '1' selects a simple boxcar.  The second argument is the input
lightcurve which generated in A1.  The third argument selects the 
width of the filter in days - using something much larger than the 
expected transit-duration is a good choice.  Common values are 2, 5 and 
10 days.  The forth, and optional, argument is a file that contains a 
transit mode.  When a model is provided the code uses the model to 
mask off the transits so they are not distorted by the filter.  For 
this example, a fitted solution has been provided and contained in the 
file 'n0_g.dat'.  We will revisit this file later.

When the command is run, a detrended time-series is output to STDOUT, we
redirect the output into a new file which has the same format as the
input file.

*A3. Plot a transit-model 

 : ../bin/transitplot5 klc06541920.d.dat n0_g.dat
 
Each panel shows the lightcurve folded at the orbital period for a 
single planet using the model to remove transits from other planets.
 
You will notice some outliers, lets fix that.
 
*A4. Clip outliers

 : ../bin/transitsigclip5 klc06541920.d.dat n0_g.dat > klc06541920.dc.dat
 
or you can even edit the light-curve yourself.

*A5. Cut out-of-transit data
 
 : ../bin/transitcut5 klc06541920.dc.dat n0_g.dat > klc06541920.dct.dat

This can help speed-up the codes, by only looking at the data that 
occurs close to or in-transit.  You don't need to do this, but can be
useful.

*A6. Fitting a transit-model

 : ../bin/transitfit5 klc06541920.dct.dat null n0_g.dat > tmodel.n0.dat
 : mv newfit.dat n0.dat
 
Transitfit5 uses a Levenberg-Marquardt minimizer to find a best-fit 
solution.  There are three main parameters needed, a lightcurve,
a radial velocity file and an initial guess for the model parameters.
We will use the .dct.dat file produced in step A5 for the lightcurve,
since we do not have radial velocities, we enter 'null' and we will use
n0_g.dat as an initial guess.  The n0_g.dat file is set up to fit for
circular orbits.  Thus ecosw and esinw are set to zero.  If you would
like eccentricity, you need to allow these parameters to be fit.

Kepler-11 has 6 known transiting planets, so running transitfit5 can 
take a few minutes - be patient. When finished a file called 
'newfit.dat' will be created.  This file should be renamed, in this 
example we will call the new fit 'n0.dat'.  The output of transitfit5 
contains 3 columns: Time, Flux, Model-Flux.  We redirected this into a 
file called tmodel.dat which can be used to examine the quality of the 
fit or whatever use you might have.  You can also replot the fit with 
transitplot5.

*A7. Extracting some information about the transit.

With a best-fit model and detrended photometry, let extract some basic
information about the transit, data and fit.  Here are some examples.

To get reduced Chi-square for planet 2

 : ../bin/transitchisq5 klc06541920.dc.dat n0.dat 2

To get an estimate of the transit S/N for planet 3

 : ../bin/transitsn5 klc06541920.dc.dat n0.dat 3
 
To get the transit-duration, in hours, for planet 1

 : ../bin/transitdur5 n0.dat 1
 
To get the transit-depth, in ppm, for planet 4

 : ../bin/transitdepth5 n0.dat 4
 
Right now the transit-duration calculation only works for 
circular-orbits.  This should be fixed in the future.

*A8. Setting up for MCMC

 : ../bin/mcmcsetup klc06541920.dct.dat null n0.dat 0
 : mv newfit.dat n0.dat
 
The MCMC code uses a Gibbs sampler as part of its routine.  This needs
to be initialized with an inital guess for the jump-size to use.  The
code mcmcsetup does this by estimate 1-sigma errors by calculating 
simple numerical derivatives.  After finishing a file called 'newfit.dat'
is created which we rename n0.dat.  If you look at the contents of the
file you will see that in column 4 the '-1' entries have been replaces
with guesses for the Gibb's sampler.  Sometimes these values can be
bad.  If the MCMC code is giving convergence problems, try looking at
the values in column 4 to make sure they make sense.  Ideally these 
should be equal to the square-root of the covarience.

The last parameter for mcmcsetup gives the planet number.  If set to 0 
then all planet parameters are output in newfit.dat.  If you wanted to
only analyze planet 1, then you would run,

 : ../bin/mcmcsetup klc06541920.dct.dat null n0.dat 1
 : mv newfit.dat n1.dat

In this case we renamed newfit.dat to n1.dat and the contents of the
n1.dat file would only contain a fit for planet 1.

*A9. Running MCMC

At this point we *could* run MCMC for the multi-planet system Kepler-11.
This would be the command you would run

 : ../bin/transitmcmc5 klc06541920.dct.dat null n0.dat 1000000 > mcmc.K11.n0.dat
 
This will produce a Markov-Chain with 1-million entries.  About what
is needed for convergence with a multi-planet system.  This will take
a few days to run. Feel free to let it run in the background. So lets 
look at the simpler case of running MCMC on one planet from the system.  

*A10. Running MCMC for one planet

Running the MCMC code for all 6-planets can take a long time - so lets
defer that activity and look at how to run MCMC on a single planet 
extracted from a multi-planet dataset.  First we need to extract the
lightcurve for a single planet to avoid the problem of overlapping 
transits.

 : ../bin/datadump5 klc06541920.dct.dat n0.dat 1 > tremove.1.dat

The code datadump5 takes the multi-planet solution stored in n0.dat and
removes all planets except the planet indicated by the third argument.
We have redirected the output in a file called tremove.1.dat.  If you
were to compare tremove.1.dat and klc06541920.dct.dat you would notice
that the transits for planets 2 through 6 have been removed and only
1 is left.  

It now a good idea to refit n1.dat to tremove.1.dat.

 : ../bin/transitfit5 tremove.1.dat null n1.dat > tmodel.n1.dat
 : mv newfit.dat n1.dat

We can now run the MCMC code to find posteriors on the 
model parameters for the first planet independently.

 : ../bin/transitmcmc5 tremove.1.dat null n1.dat 100000 > mcmc.K11.n1.dat
 
The code will now begin to run.  It will take an hour or so to complete,
so grab a coffee and relax.

*A11. Estimating posterior distributions

Once transitmcmc5 has completed, the file mcmc.K11.n1.dat will contain
Markov-Chains for the model parameters.  To see the a histogram of the
Chains and recreate a table of measured uncertainties we can run 
mcmchist5 

 : ../bin/mcmchist5 n1.dat mcmc.K11.n1.dat
 
This will plot the distributions and output a Table of uncertainties for
each model parameter and for three calculated parameters: a/R*, transit
depth and transit-duration.   

*A12. Stellar Parameters

The transit model only estimates planet radius relative to the star, to
get the absolute planet radius we need stellar parameters.  Ideally,
we would like to account for correlations between various stellar
parameters, so we will create a Markov-Chain to mix with the 
transit-model.




*A13. Transiting-Timing-Variations 







 

 